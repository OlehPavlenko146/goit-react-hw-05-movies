{"version":3,"file":"static/js/387.e42d6e08.chunk.js","mappings":"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","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastListWrap = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  gap: 20px;\n`;\n\nexport const CastListItem = styled.li`\n  width: 250px;\n`;\n\nexport const CastImage = styled.img`\n  width: 250px;\n`;\n\nexport const CastName = styled.p`\n  padding: 10px 5px;\n`;\n\nexport const CastCharacter = styled.p`\n  padding: 10px 5px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport {\n  CastListWrap,\n  CastImage,\n  CastListItem,\n  CastName,\n  CastCharacter,\n} from './Cast.styled';\n\nimport { getCast, getPoster } from '../../services/api';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    async function getCastById() {\n      try {\n        const cast = await getCast(movieId);\n        if (cast.length > 0) {\n          setCast(cast);\n        }\n      } catch (error) {\n        console.log(error.message);\n      }\n    }\n    getCastById();\n  }, [movieId]);\n\n  return (\n    <>\n      {cast.length > 0 ? (\n        <CastListWrap>\n          {cast.map(({ id, profile_path, name, character }) => (\n            <CastListItem key={id}>\n              <CastImage src={getPoster(profile_path)} alt={name} />\n              <CastName>Name: {name}</CastName>\n              <CastCharacter>Character: {character}</CastCharacter>\n            </CastListItem>\n          ))}\n        </CastListWrap>\n      ) : (\n        'Cast was not found'\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst API_KEY = 'fa9433e46ed4abfaeb75bcf31f473feb';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\naxios.defaults.baseURL = `https://api.themoviedb.org/3/`;\naxios.defaults.params = { api_key: API_KEY };\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(`trending/all/day`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error('Sorry, something happened wrong');\n    return [];\n  }\n};\n\nexport const getMovieByName = async query => {\n  try {\n    const response = await axios.get(`/search/movie`, {\n      params: {\n        api_key: API_KEY,\n        query,\n        page: 1,\n        include_adult: false,\n      },\n    });\n    return response.data.results;\n  } catch (error) {\n    console.error('Sorry, something happened wrong');\n    return [];\n  }\n};\n\nexport const getMovieDetails = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n    const {\n      title,\n      poster_path: posterPath,\n      release_date: releaseDate,\n      genres,\n      overview,\n      vote_average: voteAverage,\n    } = data;\n    return { title, posterPath, releaseDate, genres, overview, voteAverage };\n  } catch (error) {\n    console.error('Sorry, something happened wrong');\n    return [];\n  }\n};\n\nexport function getPoster(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://via.placeholder.com/250x375/c4a9c4/969696.jpg';\n}\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport const getCast = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}/credits`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return data.cast;\n  } catch (error) {\n    console.error('Sorry, something happened wrong');\n    return [];\n  }\n};\n\nexport const getMovieReview = async movieId => {\n  try {\n    const { data } = await axios.get(`/movie/${movieId}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      },\n    });\n\n    return data.results;\n  } catch (error) {\n    console.error('Sorry, something happened wrong');\n    return [];\n  }\n};\n"],"names":["CastListWrap","styled","CastListItem","CastImage","CastName","CastCharacter","movieId","useParams","useState","cast","setCast","useEffect","getCast","length","console","log","message","getCastById","map","id","profile_path","name","character","src","getPoster","alt","API_KEY","axios","api_key","getTrendingMovies","params","response","data","results","error","getMovieByName","query","page","include_adult","getMovieDetails","title","posterPath","poster_path","releaseDate","release_date","genres","overview","voteAverage","vote_average","getDate","date","split","getMovieReview"],"sourceRoot":""}